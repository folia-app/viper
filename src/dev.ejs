<html>

<head>
  <title>
    <%= compilation.options.plugins.find(plugin => plugin.constructor.name === 'HtmlWebpackPlugin').options.title  %>
  </title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <meta name="description" content="<%= compilation.options.plugins.find(plugin => plugin.constructor.name === 'HtmlWebpackPlugin').options.metaDesc %>  " />
  <head>
    <title>
      <%= compilation.options.plugins.find(plugin => plugin.constructor.name === 'HtmlWebpackPlugin').options.title %>
    </title>
      <style>
      .pointer{cursor: pointer;margin: 10px;}
      html {
        scroll-behavior: smooth;

      }
       html, body, * {margin: 0px;padding: 0px;}
       * {
        font-family: 'Comic Sans MS', 'Comic Sans', cursive;
        font-size: 24pt;
       }
       div {
        margin:10px;
        padding:10px;
       }
       button {
        padding:5px 15px;
        border-radius: 25px;
       }
       #sketch-holder {
        /* position: absolute;
        margin-left:0;
        margin-top:0; */
       }
       /* #sketch-holder {
        position: absolute;
        left:0px;
        top:0px;
        width:100vw;
        height:100vh;
       }
       #sketch-holder canvas {
          pointer-events: none;

       }
       #control {
        position:absolute;
        left:0px;
        top:0px;
        z-index:100;
       } */
       /* body {
        background-color: red;
       } */
      </style>

      <script  src="./p5.js"></script>
      <%= "<script>" + compilation.assets['viper.js'].source() + "</script>" %>

    </head>

<body>
  <div id="sketch-holder"></div>
  <div id="control">
    <button class="pointer" id="prev">prev snek</button>
    <button class="pointer" id="next">next snek</button>
    <br>
    <button class="pointer" id="prev-pattern">prev pattern</button>
    <button class="pointer" id="next-pattern">next pattern</button>
    <br>
    <button class="pointer" id="minus-length">length--</button>
    <button class="pointer" id="plus-length">length++</button>
    <br>
    <button class="pointer" id="bite">bite</button>
    <div id="pattern-name"></div>
    <div id="viper-name"></div>
  </div>
  <script>
    var viper, length = 3
    var bite = false
    var startedDrawing = false
    var stop = false
    let patterns = [
      'random', //0
      'circle', //1
      'square',//3
      'eight', //5
      'bigEight', //7
      'rotatingEight', //9
      'randomLoop', //11
      'heart', // 13
      'star' // 15
    ]
    let patternIndex = 0//Math.floor(Math.random() * (patterns.length))
    function writePatternName() {
      const pattern = viper.pattern
      document.getElementById('pattern-name').innerHTML = pattern
      document.getElementById('viper-name').innerHTML = viper.me.name
    }
    function unbite() {
      bite = false
      document.getElementById('bite').innerHTML = 'bite'
      viper.setTokenId(viper.me.tokenId, true)
      viper.redrawBackground = true
      viper.hideHole = false
      viper.backgroundStyle = viper.me.background
    }
    document.getElementById('bite').addEventListener('click', (e) => {
      e.preventDefault()
      bite = !bite
      if (bite) {
        document.getElementById('bite').innerHTML = 'un-bite'
        viper.backgroundStyle = "text"
      } else {
        unbite()
      }
    })
    document.getElementById('prev-pattern').addEventListener('click', (e) => {
      e.preventDefault()
      patternIndex--
      if (patternIndex < 0) {
        patternIndex = patterns.length - 1
      }
      viper.pattern = patterns[patternIndex % patterns.length]
      writePatternName()
    })
    document.getElementById('next-pattern').addEventListener('click', (e) => {
      e.preventDefault()
      patternIndex++
      viper.pattern = patterns[patternIndex % patterns.length]
      writePatternName()
    })
    document.getElementById('prev').addEventListener('click', (e) => {
      e.preventDefault()
      prevViper()
    })
    document.getElementById('next').addEventListener('click', (e) => {
      e.preventDefault()
      console.log(viper.me.tokenId.toString())
      nextViper()
    })
    document.getElementById('plus-length').addEventListener('click', (e) => {
      e.preventDefault()
      length = length ? length + 1 : viper.maxNumberOfLines + 1
      setLength()
    })
    document.getElementById('minus-length').addEventListener('click', (e) => {
      e.preventDefault()
      length = length ? length - 1 : viper.maxNumberOfLines - 1
      setLength()
    })
    // document.getElementById('sketch-holder').addEventListener('click', () => {
    //   // if (viper.hideHead) return
    //   stop = !stop
    //   if (stop) {
    //     patternIndex++
    //     viper.pattern = patterns[patternIndex % patterns.length]
    //   }
    // })
    function prevViper() {
      let tokenId = viper.me.tokenId - 1
      console.log({tokenId: tokenId.toString()})
      if (tokenId < 1) {
        tokenId = viper.allVipers.length
      }
      console.log({tokenId: tokenId.toString()})
      startViper(tokenId)
    }
    function nextViper() {
      let tokenId = viper.me.tokenId + 1
      console.log({tokenId: tokenId.toString()})
      if (tokenId > viper.allVipers.length) {
        tokenId = 1
      }
      console.log({tokenId: tokenId.toString()})
      startViper(tokenId)
    }
    function change(head, style = 0) {
      style = style == 0 ? 'everythingMatches' : style
      startViper(viper.allVipers.filter(v => v.head == head && v.style == style)[0].tokenId)
    }
    function setLength() {
      if (!length) {
        length = 3//viper.maxNumberOfLines
      }
      length = length > 100 ? 100 : length
      length = length < 1 ? 1 : length
      viper.maxNumberOfLines = length
      if (viper.allLines.length > length) {
        // remove one from end
        // viper.allLines = viper.allLines.slice(0, length)
        // remove one from start
        viper.allLines.shift()
      } else if (viper.allLines.length < length) {
        viper.addLine()
        viper.totalLength += viper.tweens
      }
    }
    function startViper(tokenId) {
      console.log("startViper", tokenId)
      if (bite) {
        console.log('currently bitten')
        unbite()
      } else {
        console.log('set token', tokenId)
        viper.setTokenId(tokenId, true)
      }
      setLength()
      document.getElementById('pattern-name').innerHTML = viper.pattern
      window.location.hash = tokenId
      writePatternName()
    }
    let tokenId = (window.location.hash && window.location.hash.replace("#", "")) || null

    let totalVipers = 486
    let vipers = []

    let utilViper = new Viper({
      setting: "browser"
    })
    console.log(utilViper.me.tokenId)
    // const newRNG = new Prando()
    // utilViper.setColors()
    utilViper.allVipers = utilViper.shuffle(utilViper.allVipers, utilViper.localRNG)
    const makeLong = []
    var s = function(p) {
      p.preload = async () => {
        for (let i = 0; i < 486;i++){//utilViper.allVipers.length; i++) {
          let test = utilViper.allVipers[i]
          // if (test.style == "mismatched") continue
          // if (test.style == "debug") continue
          // if (vipers.length > 2) continue
          // if (test.style !== "debug") continue
          // if (vipers.length > 0) continue
          let viper = new Viper({
            tokenId: test.tokenId,
            setting: "browser",
            pattern: "random",
            backgroundStyle: "solid",
            bgColor: "white",
            mode: "foo",
            height: 3543.3,
            width:16384,
            redrawBackground: false,
            maxNumberOfLines:  Math.ceil(Math.random() * 3),
          })
          if (makeLong.indexOf(viper.style) == -1 && i > 200) {
            makeLong.push(viper.style)
            viper.maxNumberOfLines = 100
          }
          // if (viper.pattern !== "circle" && viper.pattern !== "star") continue
          
          if (viper.pattern == "randomLoop") {
            viper.pattern = "random"
          }
          // if (viper.pattern == 'random') continue
          // if (vipers.filter(v => v.pattern == viper.pattern).length > 0) continue
          vipers.push(viper)
        }
        // viper = new Viper({
        //   tokenId,
        //   setting: "browser",
        //   pattern: "random",
        //   maxNumberOfLines: length,
        // })
        // writePatternName()
      }
      let preloaded = false
      p.setup = async () => {
        for (let i= 0; i < vipers.length; i++) {
          let viper = vipers[i]
          let canvas
          if (i !== 0) {
            canvas = vipers[i].canvas
          }
          viper.setup(p, canvas)
          if (i == 0) {
            await viper.preload()
          } else {
            viper.preloaded = vipers[0].preloaded
          }
          viper.addAllLines(viper.maxNumberOfLines)
        }
        preloaded = true
      }
      let drawn = false
      p.draw = async () => {
        if (drawn) return
        if (stop) return
        for (let i = 0; i < vipers.length; i++) {
          let viper = vipers[i]
          if (i == 0) {
            viper.drawBackground()
          }
          viper.draw()
          // drawn = true
        }
        
        // p.noLoop()
        // window.scrollTo({left, top, behaviour: 'smooth'})
        // window.scrollTo(chosenViper.x , chosenViper.y )
      }
    }
    new p5(s)
    // requestAnimationFrame(callback)
    // function callback() {

    //   console.log('calling callback')
    //   chosenViper = vipers[0]
    //   if (!chosenViper) {
    //     setTimeout( () => requestAnimationFrame(callback), 500)
    //   }
    //   let screenWidth = window.innerWidth
    //   let screenHeight = window.innerHeight
    //   const left = chosenViper.x //- (screenWidth / 2)
    //   const top = chosenViper.y// - (screenHeight / 2)
    //   // apply css offset to canvas
    //   // css canvas absolute
    //   // css body overflow hidden
    //   // css canvas margin to left or top
    //   // document.getElementById('sketch-holder').style['margin-left'] = `-${left}px`
    //   // document.getElementById('sketch-holder').style['margin-top'] = `-${top}px`
    //   window.scrollTo({left, top, behaviour: 'smooth'})
    //   requestAnimationFrame(callback)
    // }

    // move window scroll position to 100, 100
    // window.scrollTo(100, 100)
    // let chosenViper
    // setInterval(() => {
    //   try {
    //     chosenViper = vipers[0]
    //     let screenWidth = window.innerWidth
    //     let screenHeight = window.innerHeight
    //     // window.scrollTo(chosenViper.x + (screenWidth / 2), chosenViper.y + (screenHeight / 2))
    //     window.scrollTo(chosenViper.x , chosenViper.y )
    //   } catch (e) {
    //     console.log(e)
    //   }
    // }, 10)
    // setTimeout(() => {
    //   console.log({chosenViper})
    // }, 3000)
  </script>
</body>

</html>