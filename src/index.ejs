<html>

<head>
  <title>
    <%= compilation.options.plugins.find(plugin => plugin.constructor.name === 'HtmlWebpackPlugin').options.title  %>
  </title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <meta name="description" content="<%= compilation.options.plugins.find(plugin => plugin.constructor.name === 'HtmlWebpackPlugin').options.metaDesc %>  " />

  <head>
    <title>
      <%= compilation.options.plugins.find(plugin => plugin.constructor.name === 'HtmlWebpackPlugin').options.title %>
    </title>
    <!-- ... rest of the head section -->
  
    <!-- Include the contents of p5.js -->


      <style>
        body {
          margin: 0;
          padding: 0;
        }
        .pointer{
          cursor: pointer;
          margin: 10px;
        }
        div, body, html {
          margin: 0px;
          padding: 0px;
        }
      </style>

</head>

<body>
  <div id="sketch-holder"></div>
  <!-- <button class="pointer" id="prev">prev snek</button>
  <button class="pointer" id="next">next snek</button>
  <br>
  <button class="pointer" id="prev-pattern">prev pattern</button>
  <button class="pointer" id="next-pattern">next pattern</button>
  <br>
  <button class="pointer" id="minus-length">length--</button>
  <button class="pointer" id="plus-length">length++</button>
  <br>
  <button class="pointer" id="bite">bite</button>
  <div id="pattern-name"></div> -->
  
  <!-- <input type="text" id="query">
  <input type="number" id="page" value="1"> -->
  <%= "<script>"  + compilation.assets['viper.js'].source() + p5Content %>

  var viper, length
    var bite = false
    var startedDrawing = false
    var stop = false
    let patterns = [
      'random', //0
      'circle', //1
      // 'random', //2
      'square',//3
      // 'random', //4
      'eight', //5
      // 'random', //6
      'bigEight', //7
      // 'random',  //8
      'rotatingEight', //9
      // 'random', //10
      'randomLoop', //11
      // 'random', // 12
      'heart', // 13
      // 'random', // 14
      'star' // 15
    ]
    let patternIndex = 0//Math.floor(Math.random() * (patterns.length))
    // function writePatternName() {
    //   const pattern = viper.pattern
    //   console.log(`write patterh ${viper.pattern}`)
    //   document.getElementById('pattern-name').innerHTML = pattern
    // }

    // function unbite() {
    //   bite = false
    //   document.getElementById('bite').innerHTML = 'bite'
    //   viper.setTokenId(viper.me.tokenId, true)
    //   viper.redrawBackground = true
    //   viper.hideHole = false
    //   viper.backgroundStyle = viper.me.background
    // }

    // // add button for bite
    // document.getElementById('bite').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   bite = !bite
    //   if (bite) {
    //     document.getElementById('bite').innerHTML = 'un-bite'
    //     viper.backgroundStyle = "text"
    //   } else {
    //     unbite()
    //   }
    // })

    // document.getElementById('prev-pattern').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   patternIndex--
    //   if (patternIndex < 0) {
    //     patternIndex = patterns.length - 1
    //   }
    //   viper.pattern = patterns[patternIndex % patterns.length]
    //   writePatternName()
    // })
    // document.getElementById('next-pattern').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   patternIndex++
    //   viper.pattern = patterns[patternIndex % patterns.length]
    //   writePatternName()
    // })
    // document.getElementById('prev').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   prevViper()
    // })
    // document.getElementById('next').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   nextViper()
    // })
    // document.getElementById('plus-length').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   length = length ? length + 1 : viper.maxNumberOfLines + 1
    //   setLength()
    // })
    // document.getElementById('minus-length').addEventListener('click', (e) => {
    //   e.preventDefault()
    //   length = length ? length - 1 : viper.maxNumberOfLines - 1
    //   setLength()
    // })
    // document.getElementById('sketch-holder').addEventListener('click', () => {
    //   // if (viper.hideHead) return
    //   stop = !stop
    //   if (stop) {
    //     patternIndex++
    //     viper.pattern = patterns[patternIndex % patterns.length]
    //   }
    // })
    function prevViper() {
      let tokenId = viper.me.tokenId - 1
      if (tokenId < 1) {
        tokenId = viper.allVipers.length
      }
      startViper(tokenId)
    }
    function nextViper() {
      let tokenId = viper.me.tokenId + 1
      if (tokenId >= viper.allVipers.length) {
        tokenId = 1
      }
      startViper(tokenId)
    }
    function change(head, style = 0) {
      style = style == 0 ? 'everythingMatches' : 'randomColor'
      startViper(viper.allVipers.filter(v => v.head == head && v.style == style)[0].tokenId)
    }
    // function setLength() {
    //   if (!length) {
    //     length = viper.maxNumberOfLines
    //   }
    //   length = length > 100 ? 100 : length
    //   length = length < 1 ? 1 : length
    //   viper.maxNumberOfLines = length
    //   if (viper.allLines.length > length) {
    //     // remove one from end
    //     // viper.allLines = viper.allLines.slice(0, length)
    //     // remove one from start
    //     viper.allLines.shift()
    //   } else if (viper.allLines.length < length) {
    //     viper.addLine()
    //     viper.totalLength += viper.tweens
    //   }
    // }
    function startViper(tokenId) {
      if (bite) {
        unbite()
      } else {
        viper.setTokenId(tokenId, true)
      }
      // setLength()
      document.getElementById('pattern-name').innerHTML = viper.pattern
      window.location.hash = tokenId
      writePatternName()
    }
    const styles = [
      'imgRandom',
      'imgSame',
      'imgRandomRounded',
      'imgSameRounded',
      'randomColor',
      'debug']
    const bgStyle = ['text', 'gradient-low', 'gradient-high', 'bw-gradient-high', 'bw-gradient-low']
    let tokenId = (window.location.hash && window.location.hash.replace("#", "")) || null
    length = 1
    if (tokenId.indexOf("-") > -1) {
      const info = tokenId.split("-")
      tokenId = parseInt(info[0])
      length = parseInt(info[1])
    }
    const bgIndex = Math.floor(Math.random() * bgStyle.length)
    var s = function(p) {
    p.preload = async () => {
      viper = new Viper({
        // dither: true,
        tokenId,
        setting: "browser",
        maxNumberOfLines: length,
        // logs: false, // false, true, "verbose"
        // style: 'debug',//styles[Math.floor(Math.random() * (styles.length))],
        // style options
        // 1. maskClipRandom
        // 1. maskClipSame
        // 1. randomColor
        // 1. debug
        // 1. skeleton
        // 1. randomGreen*/,
        // backgroundStyle: 'text',//bgStyle[bgIndex],
        // backgroundStyle options
        // 1. solid
        // 1. gradient
        // 1. fourGradient
        // 1. image,
        // bittenBy: 1,
        // pattern: "star",//patterns[patternIndex % patterns.length],
        // pattern options
        // 1. random
        // 1. circle
        // 1. square
        // 1. eight 
        // 1. bigEight
        // 1. rotatingEight
        // 1. heart
        // 1. randomLoop */,
        // width: 686,
        // changeOnTarget: false,
        // maxNumberOfLines: 1,// Math.ceil(Math.random() * 20),
        // maxLen: 75,
        // strokeW: 60,
        // headWidth: 60 * 2.3,
        // margin: 60 * 2.3,
        // angleDistanceMin: 60,
        // fps: 25,
        // tweens: 2,
        // bgColor: "rgb(226,226,226)",
        // hideHole: true,
        // hideHead: true,
        // hideTail: true,
        // hideSnake: true,
        // redrawBackground: false,
        // wanderLoopDuration: 2,
        // fps: 35,
        // tweens: 2
      })
      // writePatternName()
    }
    p.setup = async () => {
      viper.setup(p)
      await viper.preload()
    }
    p.draw = async () => {
      if (stop) return
      viper.draw()
    }
    // setInterval(() => {
    //   const startingX = viper.startingX
    //   const startingY = viper.startingY
    //   const x = viper.x
    //   const y = viper.y
    //   const allLines = viper.allLines
    //   const totalLength = viper.totalLength
    //   nextViper()
    //   viper.allLines = allLines
    //   viper.startingX = startingX
    //   viper.startingY = startingY
    //   viper.x = x
    //   viper.y = y
    //   viper.totalLength = totalLength
    // }, 3000)

    // let intervalAmount = 1650
    //   setTimeout(() => {
    //     setInterval(() => {
    //       if (viper.length > 20) {
    //         viper.pattern = 'circle'
    //       }
    //       nextViper()
    //       // intervalAmount *= 0.9
    //     }, intervalAmount)
    //   }, 200)
    }
    new p5(s)
  </script>
</body>

</html>